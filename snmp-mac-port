#!/bin/bash -e

. ./snmp.conf # get COMMUNITY

log=/dev/shm/snmp-mac-port
test -d $log || mkdir $log

snmp_walk() {
	ip=$1
	if ! fping $ip 2>>/dev/shm/dead ; then
		echo "ERROR: $ip"
		return
	fi

	# Q-BRIDGE-MIB dot1qFdbTable
	#snmpbulkwalk -O0sUX -v2c -Cc -c $COMMUNITY $ip 1.3.6.1.2.1.17.7.1.2.2.1.2 | sed -e 's/.*7\.1\.2\.2\.[0-9]\.[0-9]\.//' -e 's/ = [^:]*: / /' -e 's/\./ /g' | awk -v name=$ip '{ printf "%s %d %02x:%02x:%02x:%02x:%02x:%02x %d\n", name, $1, $2,$3,$4,$5,$6,$7, $8 }' | tee $log/$ip
	snmpbulkwalk -O0sUX -v2c -Cc -c $COMMUNITY $ip dot1qTpFdbPort | tr '[' ' ' | tr -d ']' | awk -v name=$ip '{ printf "%s %d %s %d\n",name,$2,$4,$7 }' | tee $log/$ip
	num=`cat $log/$ip | wc -l`
	if [ $num -le 1 ] ; then
		# fake vlan using only BRIDGE-MIB::dot1dTpFdbPort
		snmpwalk -O0sUX -v2c -Cc -c $COMMUNITY $ip BRIDGE-MIB::dot1dTpFdbPort | sed -e "s/^[^:]*:/$ip -/" -e 's/\].*: / /' | tee -a $log/$ip
	fi
}

if [ ! -z "$1" ] ; then
	while [ ! -z "$1" ] ; do
		snmp_walk $1
		shift
	done
	exit 0
fi

#( ls -d $log.last/* | sed 's/^.*\///' ; ./ips ) | sort -u | while read ip

if [ ! -z "$1" ] ; then
	snmp_walk $1
fi

# fetch all switches in parallel
./sw-names | parallel -j 70 $0
exit 0

./sw-names | while read ip
do
	echo "## $ip"
	snmp_walk $ip
done
